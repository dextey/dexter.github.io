{
  "data": {
    "publication": {
      "title": "",
      "metaTags": null,
      "posts": {
        "edges": [
          {
            "node": {
              "id": "63f6477d4de164a827540a74",
              "title": "A Deep dive into Docker",
              "slug": "a-deep-dive-into-docker",
              "publishedAt": "2023-02-22T16:49:01.767Z",
              "readTimeInMinutes": 6,
              "content": {
                "html": "<p>Docker is one of the most fascinating tools I have ever seen. Even though I have used docker I never had a deep understanding of what docker is.</p>\n<p>So if you are someone, who is new to docker or trying to know more about docker, this is a perfect place.</p>\n<p>So let's learn about docker.</p>\n<p>Before knowing what docker is, we need to know</p>\n<h2 id=\"heading-why-even-use-docker\">why even use Docker</h2>\n<p>You probably had a scenario where, when you are installing an application on your system it needs some extra dependencies for it to run.</p>\n<p>If not, let's say you want to install Spotify, and Spotify needs python to be installed in your system to run. So now you need to download python and set up python again. Probably you may need other additional dependencies also. This is such a drag !</p>\n<p>Let's check on another example.</p>\n<p>You developed a program and now you want to share it with someone else. What will they do? First, they will get a copy of your program on their system and install all necessary dependencies and run it. This only happens when they know how to set up your program. What if they don't? Or maybe you developed a program on Linux and they are using a system with windows or mac. Now you have to provide accurate instructions based on the os being used by them and help them to install all the dependencies that are required. As said earlier, this is such a drag.</p>\n<p>Here is where docker comes in, with docker you just need to share the docker image of your program and with a single command they will be able to run your program in a nutshell.</p>\n<p>This is what docker helps to resolve, It helps to set up applications in any system.<br />Yes, in any system let it be windows, mac, or Linux. Irrespective of the environment docker helps to set up applications with ease.</p>\n<p>With this feature, it helps in the portability of the applications among different environments and platforms</p>\n<p>So you got an idea of why we use docker, Now let us see</p>\n<h2 id=\"heading-what-is-docker\">what is docker</h2>\n<p>Docker is a platform that helps to run software in packages called containers.<br />Let's break it down.</p>\n<p><strong>Containers</strong>, Hmm? what are they<br />Containers are isolated programs with their own portion of system memory, network, storage, and other resources.</p>\n<p>Think of it as putting the software and all its dependencies along with some portion of system resources like memory, storage, and network in a box and running it.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1677000140381/796e8c1f-b04f-490f-bc55-e144263035ab.png\" alt class=\"image--center mx-auto\" /></p>\n<p>So docker helps to create, manage and run boxes like these with ease.</p>\n<p>How does it do that?<br />We will get into that later.</p>\n<p>Before moving on further let us install docker, you can install docker by referring to the official documentation based on your system from <a target=\"_blank\" href=\"https://docs.docker.com/get-docker/\">here</a>.</p>\n<p>After installation, run <code>docker run hello-world</code> to verify the successful installation</p>\n<pre><code class=\"lang-bash\">docker run hello-world\n</code></pre>\n<p>If the installation was a success you will receive a welcome message from docker.</p>\n<p>So let's move on.</p>\n<p>Docker mainly consists of two parts<br />- Docker Client<br />- Docker Server</p>\n<p>These are basic tools for docker, a docker client is a tool that helps you to communicate with the docker server and the Docker server is a tool responsible for creating managing, and running images.</p>\n<p>Image? Yes. Do you remember the Box I mentioned above? image is a shallow copy of that box.<br />that is, an image is a snapshot of the application, its dependencies and resources, and a start-up command. This is the command the container run on start.</p>\n<p>We can create any number of containers with an image, each container with its own space.</p>\n<p>So what did happen when you run <code>docker run hello-world</code> , when you run this command, the docker Client identifies this command and interacts with the docker server.</p>\n<p>When the docker server receives this command, it first checks whether the hello-world image is already downloaded ( located in the cache ). If not, it downloads the image from the docker hub.</p>\n<p>Docker Hub is a cloud repository provided by Docker that allows users to store and share Docker images.</p>\n<p>After successfully downloading the image, docker creates and starts the container.</p>\n<p>The command <code>docker run hello-word</code> is a mixture of two other commands which are <code>docker create 'image-name'</code> &amp; <code>docker start 'container id'</code> .</p>\n<p><code>docker create hello-word</code> will create a container from the image provided and returns an id, which is the id of the created container.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1677080335175/459470e4-c325-4eac-a493-516be62f5ff5.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You can start the created container with <code>docker start 'container id'</code> .</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1677080649834/b9fddef2-183c-4421-96d8-259b1d8092fd.png\" alt class=\"image--center mx-auto\" /></p>\n<p>It is not necessary to enter the entire id, docker is smart enough to understand when provided with starting portion of the id.</p>\n<pre><code class=\"lang-bash\">docker ps --all\n</code></pre>\n<p>The above command will list all the created and running containers. Without the<br /><code>-- all</code> tag, it will only show the running containers.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1677081109519/cca9a442-0385-40c7-833b-ad8796e49af5.png\" alt class=\"image--center mx-auto\" /></p>\n<p>In short, you can run <code>docker run ' image-name '</code> to create and start a container.</p>\n<p>When starting the container, it runs the container by initiating the startup command initialized during the creation of an image.</p>\n<p>Now you understand what docker is and why is it used.</p>\n<p>But,</p>\n<h2 id=\"heading-how-does-docker-even-make-it-happen\">how does docker even make it happen</h2>\n<p>Let's see,<br />Docker makes it possible through containerization.</p>\n<p>Docker achieves containerization through two features called namespaces and Cgroups.</p>\n<p>Namespaces and Cgroups are two features of the Linux kernel</p>\n<p>Namespacing is a method for isolating system resources per process and cgroups limit the resources being used.</p>\n<p>When we run two applications, let us say Spotify and Chrome, how does it work without conflicting with each other?</p>\n<p>This is achieved using namespacing and cgroups</p>\n<p>When we run Spotify, it needs to have access to the internet, need system memory to work, and also need access to storage. Similarly, chrome needs internet access, need some more memory as you know, and storage. So how does Chrome not interrupt the data of Spotify or vice-versa, when used together?<br />This is where namespacing comes in,<br />It isolates the process of Spotify and Chrome separately and provides the necessary system resources such as memory, network, storage, etc. in the form of a container making sure that they are not interfering with each other, on the other hand, cgroups limits and prioritizes the system resources that are being used.<br />This is a top-level overview of how it runs, in actuality, it's much more complex but efficient.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1676999617746/f563d8a9-d9eb-4a6c-a420-9c0f31e46ce8.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This containerization technique is what docker uses to run applications in containers efficiently without interfering with the host operating system or other containers running on the same system. This allows for greater flexibility, scalability, and portability of applications.</p>\n<p>The namespacing and cgroups are only applicable to the Linux kernel.</p>\n<p>Then, how can docker run on different environments?</p>\n<p>Well, When we install docker on mac or windows, docker is installed on top of a Linux virtual machine in our system.<br />If you run <code>docker version</code> you can see an output like this</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1676748388078/406e304d-d80c-4e18-9595-9d3feaff8050.png\" alt class=\"image--center mx-auto\" /></p>\n<p>you can see the output <code>OS/Arch : linux</code> even in a windows or mac system.</p>\n<h2 id=\"heading-concluding-for-now\">concluding for now</h2>\n<p>Hope you got a picture of what, why, and how about docker.</p>\n<p>There are much more to know about docker such as docker commands,<br />docker file, and creating and managing docker images and containers.<br />To shorten this article, it will be available in <strong>Deep dive into docker</strong> part-2.</p>\n<p>If you like this article ü§ç Like, Share, and provide feedback üí´.<br />Follow for more, and hit me on <a target=\"_blank\" href=\"https://twitter.com/dextey_\"><strong>twitter</strong></a><strong>.</strong></p>\n<p><strong>Peace</strong>ü§ò</p>\n"
              }
            }
          }
        ]
      }
    }
  }
}
